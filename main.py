
S1=[124, 18, 154, 77, 3, 216, 99, 81, 117, 91, 112, 125, 88, 32, 10, 96, 227, 253,
141, 194, 235, 5, 111, 9, 122, 37, 206, 233, 156, 72, 53, 51, 184, 7, 20, 239,
102, 22, 166, 210, 192, 97, 226, 27, 12, 248, 79, 0, 69, 59, 196, 220, 132,
109, 94, 168, 234, 84, 15, 108, 120, 52, 142, 14, 25, 90, 151, 205, 93, 0, 26,
171, 217, 41, 1, 67, 224, 197, 21, 198, 130, 174, 231, 161, 199, 153, 76, 6,
144, 170, 246, 221, 43, 232, 29, 219, 61, 229, 191, 242, 195, 95, 137, 225,
157, 75, 39, 119, 44, 98, 104, 87, 115, 89, 56, 110, 160, 42, 31, 249, 169,
222, 146, 11, 245, 238, 136, 247, 54, 139, 200, 8, 36, 46, 126, 218, 121, 165,
105, 16, 58, 35, 135, 164, 207, 230, 2, 243, 63, 123, 214, 80, 68, 55, 183,
114, 107, 208, 62, 163, 252, 145, 116, 250, 13, 204, 127, 228, 187, 113, 49,
86, 159, 83, 152, 244, 149, 193, 57, 173, 133, 128, 150, 30, 40, 190, 255,
240, 237, 155, 85, 175, 162, 47, 134, 50, 60, 28, 186, 177, 33, 202, 176, 19,
70, 209, 24, 178, 71, 38, 212, 48, 201, 172, 129, 143, 215, 188, 181, 147,
158, 65, 101, 100, 251, 179, 182, 203, 140, 223, 66, 254, 64, 23, 45, 189, 17,
213, 131, 4, 73, 211, 167, 74, 78, 148, 236, 185, 92, 241, 82, 103, 118, 106,
34, 138]

S2=[179, 110, 232, 225, 183, 203, 88, 3, 123, 252, 129, 104, 34, 230, 92, 170,
161, 107, 32, 118, 138, 237, 167, 141, 212, 159, 14, 50, 218, 184, 67, 94,
155, 101, 35, 102, 40, 10, 253, 26, 174, 13, 121, 103, 151, 124, 142, 193, 48,
41, 113, 59, 111, 76, 189, 227, 80, 153, 160, 196, 20, 163, 31, 0, 195, 197,
29, 61, 19, 199, 241, 250, 91, 127, 145, 190, 74, 240, 62, 9, 213, 186, 238,
15, 128, 217, 180, 44, 223, 229, 162, 98, 70, 109, 8, 181, 69, 38, 231, 175,
201, 119, 46, 83, 239, 96, 1, 63, 39, 171, 226, 45, 242, 115, 246, 140, 247,
4, 152, 27, 12, 23, 202, 81, 178, 205, 211, 18, 64, 84, 43, 49, 126, 172, 52,
135, 220, 249, 244, 114, 132, 87, 6, 66, 219, 214, 42, 75, 149, 187, 65, 165,
125, 209, 216, 224, 53, 37, 134, 147, 206, 93, 82, 139, 243, 200, 99, 116,
137, 95, 245, 97, 192, 144, 112, 5, 7, 57, 24, 194, 176, 68, 221, 136, 228,
173, 158, 207, 106, 146, 248, 233, 210, 164, 120, 16, 198, 60, 133, 25, 254,
51, 47, 154, 191, 90, 157, 117, 156, 148, 150, 72, 17, 236, 28, 222, 131, 182,
234, 85, 166, 11, 71, 188, 58, 73, 108, 54, 208, 21, 204, 143, 30, 168, 22,
185, 255, 122, 77, 177, 105, 235, 215, 2, 169, 56, 33, 55, 78, 79, 89, 130, 36,
251, 86, 100]

S3=[203, 7, 247, 111, 98, 149, 13, 176, 233, 198, 101, 50, 49, 17, 214, 35, 222,
255, 170, 96, 206, 196, 182, 253, 20, 208, 90, 27, 239, 147, 94, 211, 144, 78,
21, 109, 87, 232, 64, 41, 151, 103, 175, 71, 54, 37, 62, 162, 10, 36, 160, 219,
246, 230, 165, 213, 177, 23, 187, 158, 225, 57, 141, 153, 202, 215, 134, 69,
254, 212, 152, 19, 29, 66, 251, 242, 183, 142, 116, 157, 92, 102, 207, 125,
38, 73, 137, 3, 236, 12, 46, 250, 245, 139, 229, 95, 117, 105, 16, 40, 130,
133, 42, 75, 131, 48, 30, 136, 39, 99, 34, 205, 240, 129, 104, 197, 45, 72,
79, 178, 148, 226, 106, 227, 180, 121, 138, 163, 81, 55, 77, 194, 201, 248,
199, 164, 216, 43, 80, 22, 191, 192, 4, 68, 1, 115, 74, 5, 93, 221, 188, 91,
155, 209, 84, 132, 204, 168, 238, 119, 159, 26, 113, 249, 189, 120, 61, 63,
28, 241, 218, 88, 97, 76, 235, 234, 169, 24, 112, 70, 52, 237, 15, 146, 172,
83, 0, 85, 193, 231, 31, 14, 223, 33, 6, 186, 150, 53, 32, 44, 244, 122, 9, 190,
47, 18, 58, 25, 60, 65, 128, 108, 100, 171, 243, 89, 179, 11, 127, 228, 2, 123,
166, 220, 195, 114, 154, 161, 118, 167, 107, 59, 252, 181, 185, 110, 217, 0,
86, 145, 56, 173, 82, 8, 67, 124, 51, 156, 210, 224, 143, 200, 184, 174, 135,
126]

def shift(text,i): #przesuniecie o i bitów w prawo
    text=int(text, 2)
    text=text >> i
    return bin(text)[2:]

def encrypt(plaintext, key):
    """
    encrypt

    Input
    ----------
    plaintext, key
    len(plaintext)=len(key)=64

    Output
    -------
    ciphertext

    """
    if len(plaintext) != 64:
        raise Exception("Niepoprawny rozmiar zmiennej plaintext!") 
    if len(key) != 64:
        raise Exception("Niepoprawny rozmiar zmiennej key!")    
    #Sprawdzenie dlugosci danych wejsciowych

    L=plaintext[0:32]
    R=plaintext[32:64]
    #Podzial plaintextu na 2 bloki 32-bitowe

    for i in range(1,17):
        R_temp=int(R,2)^int(key,2) #XOR z kluczem
        R_temp=shift(bin(R_temp)[2:],i).zfill(32) #Przesuniecie o i bitów w prawo
        B1=R_temp[0:8] #Podzial na 4 bloki 8-bitowe
        B2=R_temp[8:16]
        B3=R_temp[16:24]
        B4=R_temp[24:32]
        k1=key[0:8] #Podzial klucza na 4 bloki 8-bitowe
        k2=key[8:16]
        k3=key[16:24]
        k4=key[24:32]
        if int(k1,2)%3==0: #Reszta z dzielenia przez 3
            B1=S1[int(B1,2)]
        if int(k1,2)%3==1:
            B1=S2[int(B1,2)]
        if int(k1,2)%3==2:
            B1=S3[int(B1,2)]
        if int(k2,2)%3==0:
            B2=S1[int(B2,2)]
        if int(k2,2)%3==1:
            B2=S2[int(B2,2)]
        if int(k2,2)%3==2:
            B2=S3[int(B2,2)]
        if int(k3,2)%3==0:
            B3=S1[int(B3,2)]
        if int(k3,2)%3==1:
            B3=S2[int(B3,2)]
        if int(k3,2)%3==2:
            B3=S3[int(B3,2)]
        if int(k4,2)%3==0:
            B4=S1[int(B4,2)]
        if int(k4,2)%3==1:
            B4=S2[int(B4,2)]
        if int(k4,2)%3==2:
            B4=S3[int(B4,2)]
        R_temp=bin(B1)[2:].zfill(8)+bin(B2)[2:].zfill(8)+bin(B3)[2:].zfill(8)+bin(B4)[2:].zfill(8) #Polaczenie 4 blokow
        L_temp=int(L,2)
        L=R #Prawy blok staje sie lewym
        R=bin(int(R_temp,2)^L_temp)[2:] #XOR lewego bloku z wyjsciem z funkcji f

    ciphertext=L+R #Polaczenie lewego i prawego bloku      
    return ciphertext  


encrypt("0101110101010100101101011110101010001000101011010110101010001100","0101101010101001011010111101010100001000100011010110101010001100")